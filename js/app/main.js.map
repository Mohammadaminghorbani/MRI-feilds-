{"version":3,"file":"main.js","mappings":"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","sources":["webpack://AutoRadiomics/webpack/bootstrap","webpack://AutoRadiomics/webpack/runtime/compat get default export","webpack://AutoRadiomics/webpack/runtime/define property getters","webpack://AutoRadiomics/webpack/runtime/hasOwnProperty shorthand","webpack://AutoRadiomics/external commonjs \"electron\"","webpack://AutoRadiomics/external node-commonjs \"path\"","webpack://AutoRadiomics/external node-commonjs \"url\"","webpack://AutoRadiomics/external node-commonjs \"child_process\"","webpack://AutoRadiomics/external commonjs \"promise-delegate\"","webpack://AutoRadiomics/external commonjs \"fs-jetpack\"","webpack://AutoRadiomics/./src/main.ts","webpack://AutoRadiomics/./src/window.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"url\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"child_process\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"promise-delegate\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-jetpack\");","// Copyright (C) 2022 Simon Biggs\n\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nimport { app, Menu, shell } from \"electron\";\nimport path from \"path\";\nimport url from \"url\";\n\nimport { ChildProcess, spawn } from \"child_process\";\n\nimport { PromiseDelegate } from \"promise-delegate\";\nimport window from \"./window\";\n\n// @ts-ignore\n\nlet appStreamlitServer: ChildProcess;\nlet streamlitPortDelegate = new PromiseDelegate<string>();\n\nappStreamlitServer = spawn(\"./autorad\", {\n    cwd: path.join(process.resourcesPath, \"python\"),\n  });\n\nappStreamlitServer.stdout.once(\"data\", (data) => {\n  const stdoutJson = JSON.parse(`${data}`);\n  const port: string = stdoutJson[\"port\"];\n\n  streamlitPortDelegate.resolve(port);\n});\n\nappStreamlitServer.stderr.on(\"data\", (data) => {\n  console.log(`${data}`);\n});\n\nappStreamlitServer.stdout.on(\"data\", (data) => {\n  console.log(`${data}`);\n});\n\n\napp.on(\"web-contents-created\", (event, contents) => {\n  contents.on(\"will-navigate\", (event, navigationUrl) => {\n    event.preventDefault();\n\n    const parsedUrl = new url.URL(navigationUrl);\n    if ([\"https:\", \"http:\", \"mailto:\"].includes(parsedUrl.protocol)) {\n      shell.openExternal(navigationUrl);\n    }\n  });\n});\n\napp.on(\"ready\", () => {\n  Menu.setApplicationMenu(null);\n\n  const mainWindow = window(\"main\", {\n    width: 1400,\n    height: 865,\n    webPreferences: {\n      preload: path.join(__dirname, \"preload.js\"),\n    },\n  });\n\n  streamlitPortDelegate.promise.then((port) => {\n    const pymedphysAppUrl = url.format({\n      pathname: `localhost:${port}`,\n      protocol: \"http:\",\n      slashes: true,\n    });\n\n    mainWindow.loadURL(pymedphysAppUrl);\n  });\n});\n\napp.on('before-quit', function() {\n  appStreamlitServer.kill();\n});\n\napp.on(\"window-all-closed\", () => {\n  app.quit();\n});\n","// The MIT License (MIT)\n\n// Copyright (c) 2015-2021 Jakub Szwacz\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n// Adapted from\n// https://github.com/szwacz/electron-boilerplate/blob/20aff6cd/src/helpers/window.js\n\nimport { app, BrowserWindow, screen } from \"electron\";\nimport jetpack from \"fs-jetpack\";\n\nconst window: (\n  name: string,\n  options: Electron.BrowserWindowConstructorOptions\n) => BrowserWindow = (name, options) => {\n  const userDataDir = jetpack.cwd(app.getPath(\"userData\"));\n  const stateStoreFile = `window-state-${name}.json`;\n  const defaultSize = {\n    width: options.width,\n    height: options.height,\n  };\n  let state = {};\n  let win: BrowserWindow;\n\n  const restore = () => {\n    let restoredState = {};\n    try {\n      restoredState = userDataDir.read(stateStoreFile, \"json\");\n    } catch (err) {\n      // For some reason json can't be read (might be corrupted).\n      // No worries, we have defaults.\n    }\n    return Object.assign({}, defaultSize, restoredState);\n  };\n\n  const getCurrentPosition = () => {\n    const position = win.getPosition();\n    const size = win.getSize();\n    return {\n      x: position[0],\n      y: position[1],\n      width: size[0],\n      height: size[1],\n    };\n  };\n\n  const windowWithinBounds = (windowState, bounds) => {\n    return (\n      windowState.x >= bounds.x &&\n      windowState.y >= bounds.y &&\n      windowState.x + windowState.width <= bounds.x + bounds.width &&\n      windowState.y + windowState.height <= bounds.y + bounds.height\n    );\n  };\n\n  const resetToDefaults = () => {\n    const bounds = screen.getPrimaryDisplay().bounds;\n    return Object.assign({}, defaultSize, {\n      x: (bounds.width - defaultSize.width) / 2,\n      y: (bounds.height - defaultSize.height) / 2,\n    });\n  };\n\n  const ensureVisibleOnSomeDisplay = (windowState) => {\n    const visible = screen.getAllDisplays().some((display) => {\n      return windowWithinBounds(windowState, display.bounds);\n    });\n    if (!visible) {\n      // Window is partially or fully not visible now.\n      // Reset it to safe defaults.\n      return resetToDefaults();\n    }\n    return windowState;\n  };\n\n  const saveState = () => {\n    if (!win.isMinimized() && !win.isMaximized()) {\n      Object.assign(state, getCurrentPosition());\n    }\n    userDataDir.write(stateStoreFile, state, { atomic: true });\n  };\n\n  state = ensureVisibleOnSomeDisplay(restore());\n\n  win = new BrowserWindow(Object.assign({}, options, state));\n\n  win.on(\"close\", saveState);\n\n  return win;\n};\n\nexport default window;\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","appStreamlitServer","streamlitPortDelegate","PromiseDelegate","spawn","cwd","process","resourcesPath","stdout","once","data","port","JSON","parse","resolve","stderr","on","console","log","app","event","contents","navigationUrl","preventDefault","parsedUrl","includes","protocol","shell","Menu","mainWindow","name","options","userDataDir","stateStoreFile","defaultSize","width","height","win","state","windowState","visible","screen","some","display","bounds","x","y","windowWithinBounds","assign","resetToDefaults","ensureVisibleOnSomeDisplay","restoredState","read","err","restore","BrowserWindow","isMinimized","isMaximized","position","getPosition","size","getSize","getCurrentPosition","write","atomic","webPreferences","preload","__dirname","promise","then","pymedphysAppUrl","pathname","slashes","loadURL","kill"],"sourceRoot":""}